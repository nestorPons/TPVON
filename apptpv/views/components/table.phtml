<component id="--id">
    <table class="--class">
        <thead>
            <?php foreach ($columns as $key => $val) : ?>
                <th class="<?= $val ?>"><?= $val ?></th>
            <?php endforeach ?>
        </thead>
        <tbody></tbody>
        @if (--total)
        <tfoot class="tfoot">
            <tr>
                <td>TOTAL: </td>
                <td><span class="id_total"></span></td>
            </tr>
        </tfoot>
        @endif
    </table>
    <template>
        <tr onclick="--onclick" ondblclick="--ondblclick">
            <?php foreach ($columns as $key => $val) : ?>
                <td class="<?= $val ?>" data-label=""></td>
            <?php endforeach ?>
        </tr>
    </template>
    <style lang="less" scoped>
        height : 100%;
        width : 100%;

        tfoot {
            order: 3;
            width: 100%;

            tr {
                text-align: right;
            }
        }

        table {
            max-height: 75vh;
        }

        &.hoverable tbody {
            cursor: pointer;
        }

        .id {
            max-width: 6ch;
        }

        @media (max-width: 997px) {
            table {
                max-height: 65vh;
            }

            th,
            td {
                padding: 0;
            }

            thead {
                height: inherit !important;
            }
        }
    </style>
    <script>
        class Table {
            constructor(id) {
                this.el = document.getElementById(id).querySelector('table')
                this.body = this.el.getElementsByTagName('tbody')[0]
                this.template = document.getElementById(id).querySelector('template')
                this.$table = $('#' + id).find('table')
                this.$template = $(`#${id}`).find('template')
                this.data = []
            }
            line() {
                return parseInt(this.el.rows.length)
            }
            /**
             * arrData = array de datos en orden de salida
             * retorna la dila en objeto jq
             */
            addLine(id, arrData) {

                // Cargamos los datos en una variable para posteriores consultas (getData(){})
                this.data.push(arrData)

                const c = this.$template.clone().html()
                return $(c)
                    .attr('idline', id || this.$table.find('tr').length)
                    .find('td').each(function(i, el) {
                        $(this)
                            .html(arrData[i])
                            .attr('data-label', arrData[i])
                    })
                    .end()
                    .prependTo(this.$table.find('tbody'))

            }
            endScroll() {
                this.$table.animate({
                    scrollTop: this.$table.height()
                }, 100);
            }
            clearLines() {
                this.$table.find('tbody').find('tr').remove()
            }
            clear() {
                this.data = []
                this.clearLines()
            }
            showLine(exp) {
                const e = this.el.querySelector(exp);
                e.classList.remove('hidden');
                return this;
            }
            hiddenRows() {
                const trs = this.body.getElementsByTagName('tr');
                for (const tr of trs) {
                    tr.classList.add('hidden')
                }
            }
            delLine(id) {
                this.$table.find(`[idline="${id}"]`).remove()
            }
            updateLine(id, data) {
                this.delLine(id)
                return this.addLine(id, data)
            }
            total(arg) {
                const total = this.el.getElementsByClassName('id_total')[0]
                if (arg) total.innerHTML = arg
                return total.innerHTML
            }
            hoverable(value) {
                if (value != undefined) {
                    if (value) this.el.classList.add('hoverable')
                    else this.el.classList.remove('hoverable')
                }
                return this.el.classList.contains('hoverable')
            }
            html() {
                return this.el.innerHTML
            }
        }
    </script>
</component>