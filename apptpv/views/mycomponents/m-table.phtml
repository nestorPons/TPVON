<component id="--id">
    <table class="$$class">
        <thead>
            @for($$columns)
                <th class="$$value">$$value</th>
            @endfor
        </thead>
        <tbody></tbody>
        @if ($$total)
        <tfoot>
            <tr>
                <td>TOTAL: </td>
                <td><span class="id_total"></span></td>
            </tr>
        </tfoot>
        @endif
    </table>
    <template>
        <tr onclick="$$onclick" ondblclick="$$ondblclick">
            @for($$columns)
                <td class="$$value" data-label=""></td>
            @endfor
        </tr>
    </template>
    <style lang="less" scoped>
        tfoot {
            order: 3;
            width: 100%;

            tr {
                text-align: right;
            }
        }

        table {
            max-height: 75vh;
        }

        &.hoverable tbody {
            cursor: pointer;
        }

        .id {
            max-width: 6ch;
        }

        @media (max-width: 997px) {
            table {
                max-height: 65vh;
            }

            th,
            td {
                padding: 0;
            }

            thead {
                height: inherit !important;
            }
        }
    </style>
    <script>
        class MyTable extends MyComponent{
            constructor(id) {   
                super(id);
                this.el = this.cont.querySelector('table');
                this.body = this.el.getElementsByTagName('tbody')[0];
                this.rows = this.body.getElementsByTagName('tr');
                this.template = this.cont.querySelector('template');
                this.$table = $(this.cont).find('table');
                this.$template = $(this.cont).find('template');
                this.data = [];
            }
            line() {
                return parseInt(this.el.rows.length);
            }
            addEventClick(fn){
                this.body.addEventListener('click',fn);
            }
            /**
             * arrData = array de datos en orden de salida
             * retorna la dila en objeto jq
             */
            addLine(id, arrData) {
                // Cargamos los datos en una variable para posteriores consultas (getData(){})
                this.loadDataLine(arrData);

                // Carga el tag para mostrarlo en la tabla
                return this.newLine(id, arrData);
            }
            /**
             * Carla una nueva linea en la tabla
             */
            newLine(id, arrData){
                const c = this.$template.clone().html();
                return $(c)
                    .attr('idline', id || this.$table.find('tr').length)
                    .find('td').each(function(i, el) {
                        $(this)
                            .html(arrData[i])
                            .attr('data-label', arrData[i])
                    })
                    .end()
                    .prependTo(this.$table.find('tbody'));
            }
            /**
             * Carga los data.push(arrData);datos de una linea en la variable data
             */
            loadDataLine(arrData){
                this.data.push(arrData);
            }
            endScroll() {
                this.$table.animate({scrollTop: this.$table.height()}, 100);
            }
            clearLines() {
                this.body.innerHTML = '' ;
                return this;
            }
            clear() {
                this.data = [];
                this.clearLines();
            }
            showLine(exp) {
                const e = this.el.querySelector(exp);
                e.classList.remove('hidden');
                return this;
            }
            hiddenRows() {
                const trs = this.body.getElementsByTagName('tr');
                for (const tr of trs) {
                    tr.classList.add('hidden');
                }
            }
            delLine(id) {
                this.$table.find(`[idline="${id}"]`).remove();
            }
            /**
             * Actualiza una fila de la tabla
             * @param id de la nueva fila 
             * @parama array de datos de la nueva fila
             * @return object en formato JQ 
             */
            updateLine(id, data) {
                // Elimina la fila
                this.delLine(id);
                // La volvemos a crear con los nuevos
                return this.addLine(id, data);
            }
            total(arg) {
                const total = this.el.getElementsByClassName('id_total')[0];
                if (arg) total.innerHTML = arg;
                return total.innerHTML;
            }
            hoverable(value) {
                if (value != undefined) {
                    if (value) this.el.classList.add('hoverable');
                    else this.el.classList.remove('hoverable');
                }
                return this.el.classList.contains('hoverable');
            }
            html() {
                return this.el.innerHTML;
            }
            /**
             * Buscar en los datos según la función dada y los muestra
             */
            search(fn){
                // Ocultamos las filas
                this.hiddenRows();
                // Obtenemos los elementos a mostrar
                let r = this.data.filter(fn);
                // Mostramos los elementos por su id que debe ser el primer elemento del array
                for(let i of r){
                    this.body.querySelector(`[idline="${i[0]}"]`).classList.remove('hidden');
                }
            }

        }
    </script>
</component>