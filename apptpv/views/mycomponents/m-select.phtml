<?php

/**
 * Componente select 
 * Para nombrar options mediante html hay que incluir en el componente padre la opci칩n options
 * con un objeto JSON. Se puede a침adir quitar opciones en tienpo de ejecuci칩n mediante la clase JS.  
 * autor   : Nestor P칩ns 
 * email   : nestorpons@gmail.com
 * licencia: MIT 2020
 */
?>
<component id="--id" class="row col-sm-12 col-md-12">
    <datalist id="--id_datalist">
        @if($$default)
            <option value=""></option>
        @endif
        @for($$options)
            <option value="$$key">$$value</option>
        @endfor
    </datalist>
    <input type="search" id="el--id" list="--id_datalist" class="$$class $$default" placeholder=" " style="$$style" name="$$name" tile="$$tile" pattern="$$pattern" list="$$list" tabindex="$$tabindex" onfocus="$$onfocus" onblur="$$onblur" onclick="$$onclick" onkeydown="$$onkeydown" onkeyup="$$onkeyup" onchange="$$onchange" onkeypress="$$onkeypress" $$required $$disabled $$readonly $$checked/>

    <label for="el--id">$$label</label>
    <style lang="less" scoped>
        height: 86%;

        select {
            width: 100%;
        }
    </style>
    <script>
        class MySelect {
            // Id del componente general no del select
            constructor(id) {

                this.el = (typeof id == 'string') ?
                    document.getElementById(id).querySelector('input') :
                    id.querySelector('input');

                this.o = this.el.getElementsByTagName('option');
                this.CLASS_SELECTED = 'valid'; // Constante del estado seleccionado del select

                this.el.addEventListener('change', fn => this.el.classList.add(this.CLASS_SELECTED));

                this.li =document.getElementById(id).querySelector('datalist');
            }
            change(fn) {
                this.el.addEventListener('change', fn);
                return this;
            }
            addClass(myclass) {
                this.el.classList.add(myclass)
                return this
            }
            addOption(value, text) {
                let opt = document.createElement('option');

                opt.appendChild(document.createTextNode(text));
                opt.value = value;
                this.li.appendChild(opt);
                return this;
            }
            default () {
                this.el.value = 0
            }
            // Elimina todas las opciones
            clear() {
                this.reset()
                let ops = this.el.querySelectorAll('option:not(:first-child)')
                for (let o of ops) {
                    if (o) this.el.removeChild(o)
                }
                return this
            }
            // Deselecciona todas las opciones
            reset() {
                this.el.classList.remove(this.CLASS_SELECTED)
                let options = this.el.getElementsByTagName('option')

                for (let option of options) {
                    option.selected = false
                }
            }
            value(v) {
                if (v != undefined) {
                    this.el.value = v
                    this.el.seletedIndex = v
                    this.addClass('valid')
                }
                return this.el.value
            }
            // Seleciona una opcion por su valor
            option(data) {
                if (data != undefined) {
                    let optionselected = false

                    for (let option of this.o) {
                        if (option.getAttribute('value') == data) {
                            option.selected = true
                            optionselected = true
                            break
                        } else option.selected = false
                    }
                    if (optionselected && data != 0) this.el.classList.add(this.CLASS_SELECTED)
                    else if (this.el.hasAttribute('hidden')) this.el.classList.remove(this.CLASS_SELECTED)
                }
                /* return this.value() */
            }
            // Elimina la primera opcion en blanco
            required() {
                this.el.removeChild(this.o[0])
            }
        }
    </script>
</component>