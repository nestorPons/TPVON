<section id="users">
    <m-list ref="--id_table1" />
    <m-table id="--id_table1" columns="['id', 'Nombre', 'Obs', 'Tel', 'Email']" class="hoverable" onclick="app.users.show(window.event)" />
    <m-modal id="--id_win1">
        <form controller="user" action="save" validation="app.users.validation(callback)" callback="app.users.save(data)">
            <fieldset>
                <legend></legend>
                <m-input type="text" label="nombre" tabindex="1" name="nombre" required="true" />
                <m-select label="Tipo de usuario" tabindex="2" name="nivel" class="valid" required="true" options="$$type_users" selected="0" option_default="false" />

                <div class="collapse">
                    <input type="checkbox" id="editUser_main" aria-hidden="true">
                    <label for="editUser_main" aria-hidden="true" class="collapse">
                        Datos usuario
                    </label>

                    <div>
                        <m-input type="text" label="Id usuario" tabindex="3" name="id" readonly="true" />
                        <m-input type="text" label="Código" tabindex="5" name="codigo" />
                        <m-input type="tel" label="Teléfono" tabindex="6" name="tel" />
                        <m-input type="text" label="DNI" tabindex="7" name="dni" pattern="(([X-Z]{1})([-]?)(\d{7})([-]?)([A-Z]{1}))|((\d{8})([-]?)([A-Z]{1}))" tile="Introduzca el dni" />
                        <m-input type="text" label="Fecha nacimiento dd/mm/yyyy" tabindex="8" name="fecha_nacimiento" pattern="(0[1-9]|1[0-9]|2[0-9]|3[01])/(0[1-9]|1[012])/[0-9]{4}" />
                        <m-input type="text" label="Observaciones" tabindex="9" name="obs" />
                    </div>
                    <input type="checkbox" id="editUser_second" aria-hidden="true">
                    <label for="editUser_second" aria-hidden="true" class="collapse">
                        Datos cuenta
                    </label>
                    <div>
                        <m-checkbox label="Bloquear cuenta" tabindex="10" name="estado" default="1" value="2" />
                        <m-checkbox label="Aplicar promociones" tabindex="11" name="promos" value="1" />
                        <m-checkbox label="Enviar emails" tabindex="12" name="emails" value="1" />
                    </div>
                </div>
            </fieldset>
            <m-input type="hidden" name="noAuth" value="1" />
            <m-btn-success caption="Guardar" tabindex="11" />
            <m-btn-cancel caption="Eliminar" tabindex="12" class="fnDelete" />

        </form>
    </m-modal>
    <style lang="less">
        #users {
            display: grid;
            grid-template-rows: 2;

            #--id_table1 {
                max-height: 80vh;
                grid-row: 2;
            }

            .card {
                max-width: 360px;
            }
        }
    </style>
    <script>
        app.users = {
            name: 'Usuarios',
            table: 'usuarios',
            buttons: ['add', 'search'],
            currentId: null,
            Table: new MyTable('--id_table1'),
            Form: new MyModal('--id_win1'),
            validation(callback) {
                let f = this.Form.getData()
                DB.get(this.table)
                    .then(usuarios => {
                        for (i in usuarios) {
                            let u = usuarios[i]

                            if (!isEmpty(f.dni) && u.dni == f.dni && u.id != f.id) {
                                this.error = {
                                    success: false,
                                    code: 'dni',
                                    mens: 'Error dni duplicado'
                                }
                            } else if (!isEmpty(f.email) && u.email == f.email && u.id != f.id) {
                                this.error = {
                                    success: false,
                                    code: 'email',
                                    mens: 'Error email duplicado'
                                }
                            }
                        }
                        callback(this.error || {
                            success: true
                        })
                    })

                return {
                    success: true
                }
            },
            del() {
                // Eliminamos de la bd local
                DB.get(this.table, 'id', this.currentId)
                    .then(d => d[0])
                    .then(d => {
                        d.estado = 0
                        DB.set(this.table, d, 'id', d.id)
                        // Eliminamos de la tabla 
                        this.Table.delLine(this.currentId)
                        // Cerramos formulario
                        this.Form.close()

                        app.tpv.loadUsers()
                    })
            },
            add() {
                let data = {
                    id: -1,
                    estado: 1,
                    promos: 1
                }
                this.Form.clear().open(data).setTile('Nuevo usuario')
            },
            addLine(data) {
                const ob = this.Table.addLine(
                    data.id,
                    [data.id, data.nombre, data.obs, data.tel, data.email]
                )

                this.loadClass(ob, data)
            },
            updateLine(data) {
                const ob = this.Table.updateLine(
                    data.id,
                    [data.id, data.nombre, data.obs, data.tel, data.email]
                )
                this.loadClass(ob, data)
            },
            loadClass(ob, data) {
                ob.addClass(data.nombre[0].toLowerCase())

                if (data.estado == 2) ob.addClass('alert')
                else ob.removeClass('alert')
            },
            async save(rsp) {
                let data = await this.Form.getData(rsp)
                if (data) {
                    DB.set(this.table, data, 'id', data.id)

                    if (this.currentId == -1) this.addLine(data)
                    else this.updateLine(data)
                    this.Form.close()

                    if (app.income) app.income.loadUsers()
                    app.tpv.loadUsers()
                } else {
                    app.mens.error('El registro no pudo ser guardado!! \n ' + this.error.mens)
                }
            },
            load() {
                DB.get(this.table)
                    .then(users => {
                        for (i in users.reverse()) {
                            var user = users[i]
                            // Listamos los usuarios activos solamente
                            if (user.estado > 0) this.addLine(user)
                        }
                    })
            },
            show(e) {
                let path = e.path || (e.composedPath && e.composedPath());
                this.currentId = path[1].attributes.idline.value;
                DB.get(this.table, 'id', this.currentId)
                    .then(data => this.Form.open(data).setTile('Edicion usuario'))
            },
            // Formas de busqueda en usuarios
            search(value) {
                let _search = (field, value) => {
                    DB.get(this.table, field, value, 'estado>0')
                        .then(v => {
                            if (v) {
                                for (let i in v) this.Table.showLine(`[idline='${v[i].id}']`)
                            }
                        })
                }
                // Ocultamoso todas las lineas
                this.Table.hiddenRows()

                // Busqueda segun criterios
                if (/([0-9]){9,13}/.test(value)) _search('tel', value)
                else if (/[0-9]{8}[A-Za-z]{1}/.test(value)) _search('dni', value)
                else if (value.indexOf('@') != -1) _search('email', value)
                else _search('nombre', value) || _search('codigo', value)
            }
        }
    </script>
</section>