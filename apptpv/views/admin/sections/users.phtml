<section id="users">
    <m-list ref="--id_table1"/>
    <m-table id="--id_table1" columns="['id', 'Nombre', 'Obs', 'Tel', 'Email']" class="hoverable" onclick="app.users.show(window.event)" />
    <m-window id="--id_win1">
        <form controller="items" action="save" callback="app.services.save(data)">
            <m-input-text label="id" name="id" onlyread="true" />
            <m-input-text label="codigo" name="codigo" tabindex="1" title="Introduzca el código" onlyread="true" onchange="app.services.valCode(window.event)" required="true" pattern="\S{4,10}" />
            <m-input-text label="Descrición" name="descripcion" tabindex="2" />
            <m-input-text label="Precio" name="precio" tabindex="3" required="true" />
            <m-input-text label="Coste" name="coste" tabindex="4" />
            <m-input-text label="Tiempo" name="tiempo" tabindex="5" required="true" />
            <m-select id="--id_sel1" label="Tipo producto" name="tipo" class="valid" tabindex="6" options="{'1':'Servicio', '2':'Producto'}" selected="1" required="true" />
            <m-select id="--id_sel2" label="Familia" name="id_familia" class="valid" tabindex="7" selected="1" required="true" />

            <m-btn-success tabindex="8" caption="Guardar" />
            <m-btn-cancel class="fnDelete" tabindex="9" caption="Eliminar" />

        </form>
    </m-window>
    <style lang="less">
        #users {
            display: grid;
            grid-template-rows: 2;

            #--id_table1 {
                max-height: 80vh;
                grid-row: 2;
            }

            .card {
                max-width: 360px;
            }
        }
    </style>
    <script>
        app.users = {
            name: 'Usuarios',
            table: 'usuarios',
            buttons: ['add', 'search'],
            currentId: null,
            Table: new MyTable('--id_table1'),
            Form: new MyWindow('--id_win1'),
            validation(callback) {
                let f = this.Form.getData()
                DB.get(this.table)
                    .then(usuarios => {
                        for (i in usuarios) {
                            let u = usuarios[i]

                            if (!isEmpty(f.dni) && u.dni == f.dni && u.id != f.id) {
                                this.error = {
                                    success: false,
                                    code: 'dni',
                                    mens: 'Error dni duplicado'
                                }
                            } else if (!isEmpty(f.email) && u.email == f.email && u.id != f.id) {
                                this.error = {
                                    success: false,
                                    code: 'email',
                                    mens: 'Error email duplicado'
                                }
                            }
                        }
                        callback(this.error || {
                            success: true
                        })
                    })

                return {
                    success: true
                }
            },
            del() {
                // Eliminamos de la bd local
                DB.get(this.table, 'id', this.currentId)
                    .then(d => d[0])
                    .then(d => {
                        d.estado = 0
                        DB.set(this.table, d, 'id', d.id)
                        // Eliminamos de la tabla 
                        this.Table.delLine(this.currentId)
                        // Cerramos formulario
                        this.Form.close()

                        app.tpv.loadUsers()
                    })
            },
            add() {
                let data = {
                    id: -1,
                    estado: 1,
                    promos: 1
                }
                this.Form.clear().open(data).setTile('Nuevo usuario')
            },
            addLine(data) {
                const ob = this.Table.addLine(
                    data.id,
                    [data.id, data.nombre, data.obs, data.tel, data.email]
                )

                this.loadClass(ob, data)
            },
            updateLine(data) {
                const ob = this.Table.updateLine(
                    data.id,
                    [data.id, data.nombre, data.obs, data.tel, data.email]
                )
                this.loadClass(ob, data)
            },
            loadClass(ob, data) {
                ob.addClass(data.nombre[0].toLowerCase())

                if (data.estado == 2) ob.addClass('alert')
                else ob.removeClass('alert')
            },
            async save(rsp) {
                let data = await this.Form.getData(rsp)
                if (data) {
                    DB.set(this.table, data, 'id', data.id)

                    if (this.currentId == -1) this.addLine(data)
                    else this.updateLine(data)
                    this.Form.close()

                    if (app.income) app.income.loadUsers()
                    app.tpv.loadUsers()
                } else {
                    app.mens.error('El registro no pudo ser guardado!! \n ' + this.error.mens)
                }
            },
            load() {
                DB.get(this.table)
                    .then(users => {
                        for (i in users.reverse()) {
                            var user = users[i]
                            // Listamos los usuarios activos solamente
                            if (user.estado > 0) this.addLine(user)
                        }
                    })
            },
            show(e) {
                this.currentId = e.path[1].attributes.idline.value
                DB.get(this.table, 'id', this.currentId)
                    .then(data => this.Form.open(data).setTile('Edicion usuario'))
            },
            // Formas de busqueda en usuarios
            search(value) {
                let _search = (field, value) => {
                    DB.get(this.table, field, value, 'estado>0')
                        .then(v => {
                            if (v) {
                                for (let i in v) this.Table.showLine(`[idline='${v[i].id}']`)
                            }
                        })
                }
                // Ocultamoso todas las lineas
                this.Table.hiddenRows()

                // Busqueda segun criterios
                if (/([0-9]){9,13}/.test(value)) _search('tel', value)
                else if (/[0-9]{8}[A-Za-z]{1}/.test(value)) _search('dni', value)
                else if (value.indexOf('@') != -1) _search('email', value)
                else _search('nombre', value) || _search('codigo', value)
            }
        }
    </script>
</section>