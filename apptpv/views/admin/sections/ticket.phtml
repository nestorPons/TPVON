<section id="buttonsTicket">
    <m-modal id="--id_modal">
        <h1>Factura simplificada</h1>
        <m-input id="--id_pay" label="INTRODUCIR EL PAGO EN EFECTIVO" value="0" tabindex="1" onkeyup="app.ticket.change()" />
        <div class="info">
            <m-label id="--id_lbl1" label="Total" value="0" color="var(--red-color)" />
            <m-label id="--id_lbl2" label="A devolver" value="0" color="var(--main-color)" />
        </div>
        <m-input-switch id="--id_sw" type="date" label="Es regalo" caption="Fecha de vencimiento" cb_name="control" in_name="fecha_vencimiento" />
        <m-btn id="--id_btn_success" caption="Imprimir" class="tertiary" onclick="app.ticket.print()" tabindex="2" />
        <m-btn id="--id_btn_debt" caption="A deber" class="primary" onclick="app.ticket.debt()" tabindex="3" />
    </m-modal>
    <style lang="less" scoped>
        #--id_modal .card {
            padding: 10px;
        }

        #--id_pay {
            height: 5rem;
            font-size: 2rem;
        }

        .info {
            text-align: center;
            margin: 10px 0;
        }

        .info>* {
            margin: 10px;
        }
    </style>
    <script>
        app.ticket = {
            section: document.getElementById('--id'),
            name: 'Tickets',
            Ticket: null,
            lbltotal: new MyLabel('--id_lbl1'),
            lblreturn: new MyLabel('--id_lbl2'),
            inputpay: new MyInput('--id_pay'),
            Table: new MyTable('ticket_table1'),
            modal: new MyModal(--id_modal),
            expire: new MyInputSwitch(--id_sw),
            btn: {
                success: new MyButton(--id_btn_success),
                debt: new MyButton(--id_btn_debt)
            },
            change() {
                let a = parseFloat(this.inputpay.value()),
                    b = parseFloat(this.lbltotal.value()),
                    r = a - b;
                this.lblreturn.value(r.toFixed(2));
            },
            frm: {
                nombre: document.getElementById('ticket_nombre_empresa'),
                admin: document.getElementById('ticket_admin'),
                dir: document.getElementById('ticket_dir'),
                cp: document.getElementById('ticket_cp'),
                poblacion: document.getElementById('ticket_poblacion'),
                tel: document.getElementById('ticket_tel'),
                nif: document.getElementById('ticket_nif'),
                iva: document.getElementById('ticket_iva'),
                change: document.getElementById('--id_lbl2_input'),
            },
            debt() {
                if (this.Ticket.hasDebt()) {
                    let data = {
                        controller : 'tickets', 
                        action : 'paydebt', 
                        data : {
                            id_ticket : this.Ticket.id
                        }
                    }
// AKI :: la base de datos de deudas es incremental por lo que hay q quitarla de localhost
                    app.post(data , async r =>{
                        let d = await DB.get('impagos', 'id_ticket', this.Ticket.id);
                        d[0].fecha = date.now(); 
                        DB.set('impagos', d[0], 'id_ticket', this.Ticket.id);
                    }); 

                    this.close();
                    app.tpv.add();
                } else {
                    this.print(_ => {
                        DB.post('tickets', 'debt', {
                            id_ticket: this.Ticket.id
                        });
                    });
                }
            },
            print(callback) {
                this.put(false, _ => {
                    imprimirElemento(
                        document.getElementById('ticket'),
                        document.getElementById('ticketStyle')
                    );
                    app.tpv.add();
                    typeof callback === 'function' && callback();
                })
            },
            open(Ticket) {
                this.Ticket = Ticket;
                if (this.Ticket.isNew()) {
                    // NUEVO PUEDE SER IMPAGO
                    this.btn.debt.on();
                    this.btn.success.caption('Imprimir');
                    this.btn.debt.caption('A deber');



                } else {
                    if (this.Ticket.hasDebt()) {
                        // NO NUEVO CON IMPAGO (SACAR COPIAS Y ELIMINAR EL IMPAGO)
                        this.btn.debt.on();
                        this.btn.debt.caption('Eliminar deuda');
                    } else {
                        // NO NUEVO SIN IMPAGO (SOLO PUEDE SACAR COPIAS TICKET)
                        this.btn.debt.off();
                    }
                    this.btn.success.caption('Copia');
                }

                this.section.removeAttribute('style');
                this.modal.open();
                // Añadimos el total a la casilla total
                this.lbltotal.value(Ticket.total);

                const
                    p1 = DB.get('empresa').then(d => d[0]),
                    p2 = DB.get('usuarios', 'nivel', 2).then(d => d[0]),
                    p3 = DB.get('config').then(d => d[0]);

                Promise.all([p1, p2, p3]).then(d => {

                        const e = d[0],
                            u = d[1],
                            c = d[2];

                        // Cargamos los datos de la empresa
                        this.frm.nombre.innerHTML = e.nombre;
                        this.frm.admin.innerHTML = u.nombre;
                        this.frm.dir.innerHTML = `${e.calle} ${e.numero}`;
                        this.frm.cp.innerHTML = e.CP;
                        this.frm.poblacion.innerHTML = e.poblacion;
                        this.frm.tel.innerHTML = e.telefono;
                        this.frm.nif.innerHTML = e.nif;
                        this.frm.iva.innerHTML = c.iva;
                        return c.dias;
                    })
                    .then(async dias => {
                        // Reseteamos valor de la casilla regalo
                        this.expire.clear();
                        // Añadimos una fecha standar a la casilla
                        this.expire.value(date.add(app.tpv.date.value, dias, 'days', 'sql'));

                        this.Table.clear();

                        this.Ticket = Ticket;
                        let numFra = this.Ticket.fecha.getFullYear().toString().substr(2);
                        numFra += '/' + this.Ticket.id.toString().padStart(6, 0);
                        $('#ticket')
                            .find('#dateTicket').text(Ticket.fecha.toLocaleString()).end()
                            .find('#idFra').text(numFra).end();

                        for (let i in Ticket.lines) {
                            const line = Ticket.lines[i],
                                a = await DB.get('servicios', 'id', line.articulo),
                                nombre = a ? a[0] : 'No encontrado';

                            this.Table.addLine(line.id, [line.cantidad, nombre, line.dto, `${line.amo}€`]);
                        }
                        this.Table.total(this.Ticket.setTotal());
                    }).catch(reason => {
                        console.log(reason);
                    });

            },
            async put(sendMail = false, callback) {
                if (this.Ticket.isNew()) {
                    this.Ticket.fecha = date.now('sql');
                    this.Ticket.estado = 1;
                    this.Ticket.regalo = this.expire.checked() ? 1 : 0;
                    this.Ticket.fecha_vencimiento = this.expire.value();

                    // Guardamos los datos 
                    let data = await DB.post('tickets', 'new', this.Ticket.sendData());
                    this.lastId = this.Ticket.id = data.id;

                    if (this.Ticket.regalo && typeof app.control != 'undefined') app.control.add(this.Ticket);
                    app.tpv.add();
                }
                typeof callback === 'function' && callback();
            },
            close() {
                this.modal.close();
            }
        }
    </script>
</section>