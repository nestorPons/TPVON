<section id="buttonsTicket">
    <m-modal id="--id_modal">
        <h1>Factura simplificada</h1>
        <m-input id="--id_pay" label="INTRODUCIR EL PAGO EN EFECTIVO" value="0" tabindex="1" onkeyup="app.ticket.change()" />
        <div class="info">
            <m-label id="--id_lbl1" label="Total" value="0" color="var(--red-color)" />
            <m-label id="--id_lbl2" label="A devolver" value="0" color="var(--main-color)" />
        </div>
        <m-checkbox id="--id_present" class='isPresent' label='Es regalo' name='control' value='1' onclick='app.ticket.toggle()' />
        <m-input id="--id_date" type="date" label="Fecha vencimiento" name="fecha_vencimiento" /><br>
        <m-btn caption="Imprimir" class="tertiary" onclick = "app.ticket.print(false)" tabindex="2"/>
        <m-btn caption="A deber" class="primary" onclick = "app.ticket.print(true)" tabindex="3"/>
    </m-modal>
    <style lang="less" scoped>
        #--id_modal .card{ 
            padding : 10px;
        }
        #--id_pay{
            height: 5rem;
            font-size: 2rem;
        }
        .info {
            text-align: center;
            margin: 10px 0;
        }

        .info>* {
            margin: 10px;
        }

        .isPresent {
            margin: 10px;
        }
    </style>
    <script>
        app.ticket = {
            name: 'Tickets',
            Ticket: null,
            present: new MyCheckbox('--id_present'),
            txtExpire: document.getElementById('--id_date'),
            lbltotal: new MyLabel('--id_lbl1'),
            lblreturn: new MyLabel('--id_lbl2'),
            inputpay: new MyInput('--id_pay'),
            Table: new MyTable('ticket_table1'),
            modal: new MyModal(--id_modal),
            change() {
                let a = parseFloat(this.inputpay.value()),
                    b = parseFloat(this.lbltotal.value()),
                    r = a - b;
                this.lblreturn.value(r.toFixed(2));
            },
            frm: {
                nombre: document.getElementById('ticket_nombre_empresa'),
                admin: document.getElementById('ticket_admin'),
                dir: document.getElementById('ticket_dir'),
                cp: document.getElementById('ticket_cp'),
                poblacion: document.getElementById('ticket_poblacion'),
                tel: document.getElementById('ticket_tel'),
                nif: document.getElementById('ticket_nif'),
                iva: document.getElementById('ticket_iva'),
                change: document.getElementById('--id_lbl2_input'),
            },
            print(debt = false, callback) {
                this.Ticket.fecha_cobro = debt ? false :  date.now('sql') ; 
                
                this.put(false, _ => {
                    imprimirElemento(
                        document.getElementById('ticket'),
                        document.getElementById('ticketStyle')
                    );

                    typeof callback === 'function' && callback();
                })
            },
            open(Ticket) {
                this.modal.open()
                // Añadimos el total a la casilla total
                this.lbltotal.value(Ticket.total);

                // Ocultamos campo fecha de vencimiento
                this.toggle();
                const
                    p1 = DB.get('empresa').then(d => d[0]),
                    p2 = DB.get('usuarios', 'nivel', 2).then(d => d[0]),
                    p3 = DB.get('config').then(d => d[0]);

                Promise.all([p1, p2, p3]).then(d => {
                        const e = d[0],
                            u = d[1],
                            c = d[2];

                        // Cargamos los datos de la empresa
                        this.frm.nombre.innerHTML = e.nombre;
                        this.frm.admin.innerHTML = u.nombre;
                        this.frm.dir.innerHTML = `${e.calle} ${e.numero}`;
                        this.frm.cp.innerHTML = e.CP;
                        this.frm.poblacion.innerHTML = e.poblacion;
                        this.frm.tel.innerHTML = e.telefono;
                        this.frm.nif.innerHTML = e.nif;
                        this.frm.iva.innerHTML = c.iva;
                        return c.dias;
                    })
                    .then(async dias => {
                        // Añadimos una fecha standar a la casilla
                        this.txtExpire.value = date.add(app.tpv.date.value, dias, 'days', 'sql');

                        // Reseteamos valor de la casilla regalo
                        this.present.checked(false);
                        this.Table.clear();

                        this.Ticket = Ticket;

                        let numFra = this.Ticket.fecha.getFullYear().toString().substr(2);
                        numFra += '/' + this.Ticket.id.toString().padStart(6, 0);
                        $('#ticket')
                            .find('#dateTicket').text(Ticket.fecha.toLocaleString()).end()
                            .find('#idFra').text(numFra).end();

                        for (let i in Ticket.lines) {
                            const line = Ticket.lines[i],
                                a = await DB.get('servicios', 'id', line.articulo),
                                nombre = a ? a[0] : 'No encontrado';

                            this.Table.addLine(line.id, [line.cantidad, nombre, line.dto, `${line.amo}€`]);
                        }
                        this.Table.total(this.Ticket.setTotal());
                    });
            },
            async put(sendMail = false, callback) {
                if (this.Ticket.new) {
                    this.Ticket.fecha = date.now('sql');
                    this.Ticket.estado = 1;
                    this.Ticket.regalo = this.present.checked() ? 1 : 0;
                    this.Ticket.fecha_vencimiento = this.txtExpire.value; 

                    // Guardamos los datos 
                    let data = await DB.post('tickets', 'new', this.Ticket.sendData());
                    this.lastId = this.Ticket.id = data.id;

                    if (this.Ticket.regalo && typeof app.control != 'undefined') app.control.add(this.Ticket);
                    app.tpv.add();
                }

                typeof callback === 'function' && callback();
            },
            toggle(e) {
                this.txtExpire.classList.toggle('hidden');
            },
            close() {
                this.modal.close();
            }
        }
    </script>
</section>