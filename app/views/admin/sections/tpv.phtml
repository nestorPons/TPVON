<section id="tpv">
    <?php
    $table = new Table(['columns'=>['Código', 'Descripción', 'Cantidad', 'Precio', 'Dto', 'Importe'], 
    'class'=>'hoverable', 'onclick'=>'tpv.loadLineFromTable(window.event)']);
    $id = new InputRead(['value' => $tickets_new_id, 'label' => 'Id'],  false);
    $date = new InputRead(['value' => $today, 'label' => 'Fecha']);
    $hour = new InputRead(['value' => $tickets_hora, 'label' => 'Hora', 'class' => 'clock'],  false);
    $emp = new Select(['label' => 'Operador', 'required' => true, 'tabindex'=>1], false);
    $cli = new Select(['label' => 'Cliente', 'tabindex' => 2, 'onchange' => 'tpv.loadClient()'], false);
    
    // Linea
    $code = new Select(['label' => 'Codigo', 'name' => 'servicio', 'required' => true, 'class'=>'keyEnterOut', 
        'tabindex'=>3, 'onblur'=>'tpv.loadLine()'], false);
    $des = new InputText(['label' => 'Desctipcion','tabindex'=>4, 'class'=>'keyEnterOut'],  false);
    $quan = new InputNumber(['label' => 'Cantidad', 'tabindex'=>5, 'value'=>'1', 'onblur'=>'tpv.calculate()', 'class'=>'keyEnterOut'], false);
    $pric = new InputNumber(['label' => 'Precio', 'tabindex'=>6, 'value'=>'0', 'onblur'=>'tpv.calculate()', 'class'=>'keyEnterOut'], false);
    $iva = new InputHidden(['label' => 'Iva %','value'=>"$iva"], false);
    $dto = new InputNumber(['label' => 'Dto %', 'tabindex'=>7,'value'=>'0', 'onblur'=>'tpv.calculate()', 'class'=>'keyEnterOut'], false);
    $amo = new InputRead(['id' => 'amount', 'label' => 'Importe', 'value'=>'0'], false);
    $btnOk = new ButtonSuccess(['tabindex'=>8, 'onclick'=>'tpv.addLine()','class'=>'keyEnterOut']);
    $btnClear = new ButtonCancel(['caption'=> '', 'onclick'=>'tpv.clearLine()', 'icon' => 'cross']);

    $txtTotal = new InputRead(['value' => 0, 'label' => 'Total'], false);
    $btnTicket = new ButtonSuccess(['onclick'=>'tpv.create()', 'caption'=>'Ticket']);

    $modTicket = new Modal(['body'=> \VIEWS\ADMIN\SECTIONS . 'ticket.phtml'], false, $Company);
    ?> 
     
</section> 
<style>
    #tpv{
        align-items: flex-start;
        display: grid;
        grid-template-rows: auto [table] 400px auto auto auto;
        grid-template-columns: [first] 10rem 1fr 1fr 7rem 7rem 7rem  [prelast] 7rem [last] 2rem;
        grid-row-gap: 5px;
    }
    #tpv table:not(.horizontal) thead{
        height: 60px;
    }
    #tpv * {
        font-size: 0.8rem;
    }
    #tpv table{
        grid-row: table;
        grid-column: 1/-1;
    }
    #tpv #<?= $id->id() ?>{
        grid-area: 1/1;
    }
    #tpv #<?= $hour->id() ?>{
        grid-row: 1;
        grid-column: prelast;
    }
    #tpv #<?= $date->id() ?>{
        grid-row: 1;
        grid-column: 6;
        text-align: center;
    }
    #tpv #<?= $hour->idEl() ?>{
        text-align: center;
    }
    #tpv #<?= $code->id() ?>{
        grid-area: 3/1;
    }
    #tpv #<?= $des->id() ?>{
        grid-row: 3;
        grid-column: 2 / span 2;
    }
    #tpv #<?= $emp->id() ?>{
        grid-row: 1;
        grid-column: 2;
    }
    #tpv #<?= $cli->id() ?>{
        grid-row: 1; 
        grid-column: 3;
    }
    #tpv #<?= $quan->id() ?>{
        grid-area: 3/4;
    }
    #tpv #<?= $pric->id() ?>{
        grid-area: 3/5;
    }
    #tpv #<?= $dto->id() ?>{
        grid-area: 3/6;
    }
    #tpv #<?= $amo->id() ?>{
        grid-row: 3;
        grid-column: prelast;
    }
    #tpv .Descripción{
        width: 40%;
    }
    /* TXT TOTAL */
    #tpv #<?= $txtTotal->id() ?>{
        grid-row: 5;
        grid-column: first;
        transform: translateY(-15px);
    }
    #tpv #<?= $txtTotal->id()?> input{
        font-size: 1.2rem;
        transform: translateY(15px);
        font-weight: 900; 
    }
    #tpv #<?= $txtTotal->id()?> label{
        font-size: 1.2rem;
        color: var(--fore-color);   
    }
    #tpv #<?= $btnTicket->id() ?>{
        grid-row: 5;
        grid-column: prelast / span 2 ;
    }
    #tpv .Importe{
        text-align: right;
    }
    #tpv #<?= $btnOk->id() ?>{
        grid-row: 4;
        grid-column: prelast / span 2;
    }
    #tpv #<?= $btnClear->id() ?>{
        grid-row: 3;
        grid-column: last;
    }
    #<?=$modTicket->idEl()?>{
        max-height: 80vh;
    }
</style>
<script>
    var tpv = {
        buttons     : ['add', 'prev', 'next','del'],
        total       : 0,
        client      : null, 
        currentId   : <?=$tickets_new_id?>,
        lastId      : <?=$tickets_new_id?>, 
        Ticket      : new Ticket(),
        Table       : new Table('<?=$table->idEl()?>'),
        Modal       : new Modal('<?=$modTicket->id()?>') ,
        selCode     : new Select('<?=$code->id()?>'), 
        selEmp      : new Select('<?=$emp->id()?>'), 
        selCli      : new Select('<?=$cli->id()?>'), 
        dto         : document.getElementById('<?=$dto->idEl()?>'), 
        amount      : document.getElementById('<?=$amo->idEl()?>'),
        date        : <?=$date->idEl()?>,
        hour        : <?=$hour->idEl()?>, 
        $id         : $('#<?=$id->idEl()?>'), 
        $description: $('#<?=$des->idEl()?>'),
        $employees  : $('#<?=$emp->id()?>'),
        $client     : $('#<?=$cli->id()?>'),
        $hour       : $('#<?=$hour->idEl()?>'),
        $quantity   : $('#<?=$quan->idEl()?>'),
        $price      : $('#<?=$pric->idEl()?>'),
        $btnOk      : $('#<?=$btnOk->idEl()?>'),
        $btnClear   : $('#<?=$btnClear->idEl()?>'),
        $total      : $('#<?=$txtTotal->idEl()?>'),
        $iva        : $('#<?=$iva->idEl()?>'),
        open(){
            this.selEmp.el.focus()
        },
        loadClient(){
            echo('buscando cliente...')
            this.client = new User(tpv.selCli.value())
        },
        load(){
            this.loadUsers()
            this.loadServ()
        },
        loadUsers(){
            this.selEmp.clear()
            this.selCli.clear()

            DB.get('usuarios','estado', 1, 'nivel>0')
                .then(emp => {
                    for(i in emp){
                        this.selEmp.addOption(emp[i].id, emp[i].nombre)
                    }
                })
            DB.get('usuarios','estado', 1)
                .then(users => {
                    for(i in users){
                        this.selCli.addOption(users[i].id, users[i].nombre)
                    }
                })
        },
        loadServ(){
            this.selCode.clear()
            DB.get('servicios','estado', 1)
            .then(serv => {
                for(i in serv){
                    this.selCode.addOption(serv[i].id, serv[i].codigo)
                }
            })
        },
        openTicket(){
            this.Modal.open()
            ticket.open(tpv.Ticket)
        },
        close(){
            this.Modal.close()
        },
        reset(){
            const f = new Date();

            this.Ticket = new Ticket()
            this.date.value = app.date.now('date')
            this.hour.value = app.date.now('hour')
            this.dto.value = 0
            this.selCli.value(0)
            this.clearLine()
            this.clearLines()
            this.clearUsers()
            this.printTotal()
            this.close()
        },
        // Cargamos un Ticket con los datos introducidos por el usuario
        create(){
            this.Ticket.id_usuario = this.selEmp.value()
            this.Ticket.id_cliente = this.selCli.value()
            this.Ticket.fecha = new Date
            this.Ticket.id = this.$id.val()

            if(this.Ticket.validate(), this.client.validate())
                this.openTicket()
            else 
                mns.error('Faltan datos para crear el ticket')

        },
        calculate(){
            let amount = this.$quantity.val() * this.$price.val(), 
                dto = this.dto.value * amount / 100, 
                total = amount - dto
            this.amount.value = total.toFixed(2)
        },
        clearLine(){
            this.selCode.default()
            this.$description.val('')
            this.$quantity.val(1)
            this.$price.val(0)
            this.amount.value = 0
            //this.selCode.el.focus()
        },
        clearLines(){
            this.Table.clearLines()
        },
        clearUsers(){
            this.selCli.reset()
            this.selEmp.reset()
        },
        printTotal(){
            this.total = this.Ticket.total()
            this.$total.val(this.total)
        },
        addLine(){
            this.calculate()
    
            var line = this.Ticket.addLine(
                this.selCode.value(), 
                this.$description.val(), 
                this.$quantity.val(), 
                this.$price.val(), 
                this.dto.value, 
                this.amount.value,
                this.$iva.val()
            )

            // Validamos los d  mos en la tabla
            if(line.success) this.addLineTable(line.id, line.articulo, line.des, line.cantidad, line.precio, line.dto, line.amo)
            else this.selCode.el.focus
        },
        // Estrategia de promocion de filiacion clientes VIP por tiempo 
        addPromo(callback){
            if(this.client && this.client.promos) {
                DB.get('promos','id',1)
                .then(d => d[0])
                .then(promo => {       
                        // Aplicamos la promocion si el último ticket esta dentro del periodo establecido como valido
                        if(this.client.lastTicket && app.date.diff(this.client.lastTicket, app.date.actual()) <= promo.valor) this.dto.value = promo.dto
                        callback()
                    })               
            } else {
                callback()
            }
        },
        addLineTable(id, articulo, des, cantidad, precio, dto, amo){
            this.Table.addLine(id, [articulo, des, cantidad, precio, dto, amo || cantidad * precio])

            this.clearLine()
            this.printTotal()
            // Scroll al final
            this.Table.endScroll()
        },  
        // Cargamos una linea de edición mediante el código del servicio con los datos predeterminados (descripción, precio ... )
        loadLine(){
            let id = this.selCode.value()
            this.addPromo(_=>{
                if(id){
                    DB.get('servicios', 'id' , id)
                        .then(d => d[0])
                        .then(el => {
                            this.$description.val(el.descripcion)
                            this.$price.val(el.precio)
                        })
                }
            })
        },
        loadLineFromTable(e){
            const idLine = e.path[1].attributes.idline.value
   
            // Eliminamos la linea del objeto
            let line = this.Ticket.getLine(idLine)
            this.Ticket.deleteLine(idLine)

            // Vista
            DB.get('servicios','id',line.articulo)
                .then(d => d[0])
                .then(ser => {
                    this.$code
                        .addClass('valid')
                        .find('options').attr("selected", false).end()
                        .find('[value='+ line.articulo +']').attr("selected", true)
                        
                    this.$description.val(ser.descripcion)
                    this.$quantity.val(line.cantidad)
                    this.$price.val(line.precio)
                    this.dto.value = line.dto
                    this.amount.value = line.amo
        
                    this.Table.delLine(e.path[1].attributes.idline.value)
                               
                    this.printTotal()
                })
        },
        del(){
            this.request('del', this.currentId, (respond, status) => this.next())
        },
        next(){
            this.request('next', this.currentId, d => {
                d.id == -1 && this.add(d) || this.loadDataTicket(d)
            })
        },
        prev(){
            this.request('prev', this.currentId, d => this.loadDataTicket(d))
        },
        add(){
            this.request('last', this.currentId, d => this.loadDataTicket(
                {
                    id          : parseInt(d.id) + 1, 
                    estado      : 1, 
                    id_usuario  : 0, 
                    id_cliente  : 0, 
                    fecha       : app.date.current(), 
                    lines       : [] 
                }))
        },
        request(action, id, callback){
            let self = this,
            data = {
                controller: 'tickets', 
                action: action,
                data: {
                    id: id
                }
            }
            app.post(data, function(respond, status){
                typeof callback == 'function' && callback(respond, status)
            }, false)
        },
        // Cargamos los datos del ticket actual
        loadDataTicket(data){

            this.reset()
            this.Ticket = new Ticket(data)
            if(data.estado == undefined) {
                this.$id.val(this.currentId)
                return false 
            }
            let d = new Date(data.fecha)
            let arrdate = data.fecha.split(' ')

            this.$id.val(data.id)
            this.selEmp.option(data.id_usuario)
            this.selCli.option(data.id_cliente)
            
            this.date.value = d.toLocaleDateString()
            this.hour.value = d.toLocaleTimeString()
            
            // Cargamos el id del tickket actual
            this.currentId = data.id
            // Cargamos las lineas 
            for(let i in data.lines){
                let line = data.lines[i]
                DB.get('servicios', 'id' , line.articulo)
                    .then(d => d[0])
                    .then(ser => {if(ser) this.addLineTable(line.id, ser.codigo, ser.des, line.cantidad, line.precio, line.dto)})
            }
        }
    }
    // Caso especial de carga de js por ser el formulario inicial
    // El resto se cargan con su funcion load()
    $(function(){
        tpv.load()
    })

</script>