<?php namespace app\views\components\controllers;?>
<section id="tpv">
    <?php
        $table = new Table(['columns'=>['Código', 'Descripción', 'Cantidad', 'Precio', 'Dto', 'Importe'], 
        'class'=>'hoverable', 'onclick'=>'tpv.loadLineFromTable(window.event)']);
        $id = new InputRead(['value' => $tickets_new_id, 'label' => 'Id'],  false);
        $hour = new InputRead(['value' => $tickets_hora, 'label' => 'Hora', 'class' => 'clock'],  false);
        $emp = new Select(['label' => 'Operador', 'required' => true, 'tabindex'=>1], false);
        $cli = new Select(['label' => 'Cliente', 'tabindex'=>2], false);
        
        // Linea
        $code = new Select(['label' => 'Codigo', 'name' => 'servicio', 'required' => true, 'class'=>'keyEnterOut', 
            'tabindex'=>3, 'onblur'=>'tpv.loadLine()'], false);
        $des = new InputText(['label' => 'Desctipcion','tabindex'=>4, 'class'=>'keyEnterOut'],  false);
        $quan = new InputNumber(['label' => 'Cantidad', 'tabindex'=>5, 'value'=>'1', 'onblur'=>'tpv.calculate()', 'class'=>'keyEnterOut'], false);
        $pric = new InputNumber(['label' => 'Precio', 'tabindex'=>6, 'value'=>'0', 'onblur'=>'tpv.calculate()', 'class'=>'keyEnterOut'], false);
        $iva = new InputHidden(['label' => 'Iva %','value'=>"$iva"], false);
        $dto = new InputNumber(['label' => 'Dto %', 'tabindex'=>7,'value'=>'0', 'onblur'=>'tpv.calculate()', 'class'=>'keyEnterOut'], false);
        $amo = new InputRead(['id' => 'amount', 'label' => 'Importe', 'value'=>'0'], false);
        $btnOk = new ButtonSuccess(['tabindex'=>8, 'onclick'=>'tpv.addLine()','class'=>'keyEnterOut']);
        $btnClear = new ButtonCancel(['caption'=> '', 'onclick'=>'tpv.clearLine()', 'icon' => 'cross']);

        $txtTotal = new InputRead(['value' => 0, 'label' => 'Total'], false);
        $btnTicket = new ButtonSuccess(['onclick'=>'tpv.create()', 'caption'=>'Ticket']);
        ?> 
     
</section> 
<section id="auxiliar">
    <?php
        $modTicket = new Modal(['body'=> \VIEWS\ADMIN\SECTIONS . 'ticket.phtml'], false, $Company);
    ?>
</section>
<style>
    #tpv{
        align-items: flex-start;
        display: grid;
        grid-template-rows: auto [table] 400px auto auto auto;
        grid-template-columns: [first] 10rem 1fr 1fr 6rem 6rem  6rem  [prelast] 8rem [last] 2rem;
        grid-row-gap: 5px;
    }
    #tpv table:not(.horizontal) thead{
        height: 60px;
    }
    #tpv * {
        font-size: 0.8rem;
    }
    #tpv table{
        grid-row: table;
        grid-column: 1/-1;
    }
    #tpv #<?= $id->id() ?>{
        grid-area: 1/1;
    }
    #tpv #<?= $hour->id() ?>{
        grid-row: 1;
        grid-column: prelast;
    }
    #tpv #<?= $hour->idEl() ?>{
        text-align: center;
    }
    #tpv #<?= $code->id() ?>{
        grid-area: 3/1;
    }
    #tpv #<?= $des->id() ?>{
        grid-row: 3;
        grid-column: 2 / span 2;
    }
    #tpv #<?= $emp->id() ?>{
        grid-row: 1;
        grid-column: 2/span 2;
    }
    #tpv #<?= $cli->id() ?>{
        grid-row: 1; 
        grid-column: 4/span 2;
    }
    #tpv #<?= $quan->id() ?>{
        grid-area: 3/4;
    }
    #tpv #<?= $pric->id() ?>{
        grid-area: 3/5;
    }
    #tpv #<?= $dto->id() ?>{
        grid-area: 3/6;
    }
    #tpv #<?= $amo->id() ?>{
        grid-row: 3;
        grid-column: prelast;
    }
    /* TXT TOTAL */
    #tpv #<?= $txtTotal->id() ?>{
        grid-row: 5;
        grid-column: first;
        transform: translateY(-15px);
    }
    #tpv #<?= $txtTotal->id()?> input{
        font-size: 1.2rem;
        transform: translateY(15px);
        font-weight: 900; 
    }
    #tpv #<?= $txtTotal->id()?> label{
        font-size: 1.2rem;
        color: var(--fore-color);   
    }
    #tpv #<?= $btnTicket->id() ?>{
        grid-row: 5;
        grid-column: prelast / span 2 ;
    }
    #tpv .Importe{
        text-align: right;
    }
    #tpv #<?= $btnOk->id() ?>{
        grid-row: 4;
        grid-column: prelast / span 2;
    }
    #tpv #<?= $btnClear->id() ?>{
        grid-row: 3;
        grid-column: last;
    }
    #<?=$modTicket->idEl()?>{
        max-height: 80vh;
    }
</style>
<script src="js/Line.min.js"></script>
<script src="js/Ticket.min.js"></script>
<script>
    var tpv = {
        buttons: ['prev', 'next','del'],
        total: 0,
        currentId: <?=$tickets_new_id?>,
        lastId: <?=$tickets_new_id?>, 
        Ticket : new Ticket(),
        Table : new Table('<?=$table->idEl()?>'), 
        $id : $('#<?=$id->idEl()?>'), 
        $code :  $('#<?=$code->idEl()?>'),
        selCod: <?=$code->id()?>, 
        $description : $('#<?=$des->idEl()?>'),
        $employees : $('#<?=$emp->idEl()?>'),
        selEmp  : <?=$emp->id()?>, 
        $client : $('#<?=$cli->idEl()?>'),
        selCli: <?=$cli->id()?>, 
        $hour : $('#<?=$hour->idEl()?>'),
        $quantity : $('#<?=$quan->idEl()?>'),
        $price : $('#<?=$pric->idEl()?>'),
        $dto : $('#<?=$dto->idEl()?>'),
        $amount : $('#<?=$amo->idEl()?>'),
        $btnOk : $('#<?=$btnOk->idEl()?>'),
        $btnClear : $('#<?=$btnClear->idEl()?>'),
        $total : $('#<?=$txtTotal->idEl()?>'),
        $switch : $('#control_<?=$modTicket->id()?>'),
        $iva :  $('#<?=$iva->idEl()?>'),
        open(){
            this.$employees.focus()
        },
        load(){
            this.loadUsers()
            this.loadServ()
        },
        loadUsers(){
            const emp = app.data.get('usuarios','estado', 1, 'nivel>0')
            const users = app.data.get('usuarios','estado', 1)
            
            for(i in emp){
                this.selEmp.addOption(emp[i].id, emp[i].nombre)
            }
            for(i in users){
                this.selCli.addOption(users[i].id, users[i].nombre)
            }

        },
        loadServ(){
            const serv = app.data.get('servicios','estado', 1)
            for(i in serv){
                this.selCod.addOption(serv[i].id, serv[i].codigo)
            }
        },
        openTicket(){
            this.$switch.prop('checked',true)
            ticket.open(tpv.Ticket)
        },
        close(){
            this.$switch.prop('checked',false)
        },
        new(){
            this.$id.val(++this.lastId)
            this.currentId = this.lastId
            this.reset() 
        },
        reset(){
            this.Ticket = new Ticket()
            this.clearLine()
            this.clearLines()
            this.clearUsers()
            this.printTotal()
            this.close()
        },
        // Cargamos un Ticket con los datos introducidos por el usuario
        create(){
            this.Ticket.id_empleado = this.$employees.val()
            this.Ticket.employee_name = this.$employees.find(':selected').text()
            this.Ticket.id_cliente = this.$client.val()
            this.Ticket.client_name = this.$client.find(':selected').text()
            this.Ticket.fecha = new Date
            this.Ticket.id = this.$id.val()

            if(this.Ticket.validate())
                this.openTicket()
            else 
                mns.error('Faltan datos para crear el ticket')

        },
        calculate(){
            let amount = this.$quantity.val() * this.$price.val(), 
                dto = this.$dto.val() * amount / 100, 
                total = amount - dto
            this.$amount.val(total)
        },
        clearLine(){
            this.$code.val('')
            this.$description.val('')
            this.$quantity.val(1)
            this.$price.val(0)
            this.$amount.val(0)
            this.$code.focus()
        },
        clearLines(){
            this.Table.clearLines()
        },
        clearUsers(){
            this.$client.find(':selected').attr("selected", false).removeClass('valid')
            this.$employees.find(':selected').attr("selected", false).focus().removeClass('valid')
        },
        printTotal(){
            this.total = this.Ticket.total()
            this.$total.val(this.total)
        },
        addLine(){
            this.calculate()
            
            var line = this.Ticket.addLine(
                this.$code.val(), 
                this.$description.val(), 
                this.$quantity.val(), 
                this.$price.val(), 
                this.$dto.val(), 
                this.$amount.val(),
                this.$iva.val()
            )
            // Validamos los d  mos en la tabla
            if(line.success) this.addLineTable(line.id, line.articulo, line.des, line.cantidad, line.precio, line.dto, line.amo)
            else  this.$code.focus()
        },
        addLineTable(id, articulo, des, cantidad, precio, dto, amo){
            this.Table.addLine(id, [articulo, des, cantidad, precio, dto, amo || cantidad * precio])

            this.clearLine()
            this.printTotal()
            // Scroll al final
            this.Table.endScroll()
        },  
        // Cargamos una linea de edición mediante el código del servicio con los datos predeterminados (descripción, precio ... )
        loadLine(){
            let code = this.$code.find(':selected').text(),
                el = app.data.get('servicios', 'codigo' , code)[0]

            if(el){
                this.$description.val(el.descripcion)
                this.$price.val(el.precio)
            }
        },
        loadLineFromTable(e){
            const idLine = e.path[1].attributes.idline.value
   
            // Eliminamos la linea del objeto
            let line = this.Ticket.getLine(idLine)
            this.Ticket.deleteLine(idLine)

            // Vista
            let ser = app.data.get('servicios','id',line.articulo)

            this.$code
                .addClass('valid')
                .find('options').attr("selected", false).end()
                .find('[value='+ line.articulo +']').attr("selected", true)
                
            this.$description.val(ser.descripcion)
            this.$quantity.val(line.cantidad)
            this.$price.val(line.precio)
            this.$dto.val(line.dto)
            this.$amount.val(line.amo)

            this.Table.delLine(e.path[1].attributes.idline.value)
                       
            this.printTotal()
        },
        del(){
            let self = this
            this.request('del', function(respond, status){
                self.next()
            })
        },
        next(){
            if(this.currentId ==  this.lastId) {
                this.reset()
                this.$id.val(this.currentId) 
            }
            if(this.currentId < this.lastId) this.getTicket(++this.currentId, this.next)
        },
        prev(){
            if(this.currentId > 0) this.getTicket(--this.currentId, this.prev)
        },
        getTicket(id, fn){
            let self = this
            this.request('get', function(respond, status){
                if(status) self.loadDataTicket(respond)
                else fn.apply(self)
            })
        },
        request(action, callback){
            let self = this,
            data = {
                controller: 'tickets', 
                action: action,
                data: {
                    id: this.currentId
                }
            }
            app.post(data, function(respond, status){
                typeof callback == 'function' && callback(respond, status)
            })
        },
        // Cargamos los datos del ticket actual
        loadDataTicket( ticket ){
            echo('loadTicket....')
            this.reset()
            this.Ticket = new Ticket(ticket)

            if(ticket.estado == undefined) {
                this.$id.val(this.currentId)
                return false 
            }

            let arrdate = ticket.fecha.split(' ')

            this.$id.val(ticket.id) 
            this.$employees.addClass('valid').find('[value='+ticket.id_empleado+']').attr("selected", true)
            this.$client.addClass('valid').find('[value='+ticket.id_cliente+']').attr("selected", true)
            this.$hour.val(arrdate[1].substr(0,5))

            // Cargamos las lineas 
            for(let i in ticket.lines){
                var line = ticket.lines[i],
                    ser  = app.data.get('servicios', 'id' , line.articulo)

                if(ser)
                    this.addLineTable(line.id, ser.codigo, ser.des, line.cantidad, line.precio, line.dto)

            }
        }
    }
    // Caso especial de carga de js por ser el formulario inicial
    // El resto se cargan con su funcion load()
    $(function(){
        tpv.load()
    })

</script>