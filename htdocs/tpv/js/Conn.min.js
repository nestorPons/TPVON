const READONLY = "readonly";
const READWRITE = "readwrite";
class Conn{
    constructor(namedb, table = ''){
        this.table = table
        this.data = []
        this.namedb = namedb
        this.db = null
        this.objectStore = {}
        this.version = undefined
        this.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        /* this.startDB() // For load version
            .then(e => (table != '') && this.addObjectStore(table)) */

    } 
    startDB(){
        console.log('startDB...')
        return new Promise((resolve, reject)=>{

            const request = this.indexedDB.open(this.namedb, this.version) 
            request.onupgradeneeded = (e) => {
                console.log('onupgradeneeded...')
                if (this.table != '') this.addObjectStore(this.table)
                let db = request.result
                if (Object.keys(this.objectStore).length !== 0 ){
                    let storeName = this.objectStore.store.name
                    try{
                        let obj = db.createObjectStore(storeName,{
                            keyPath: this.objectStore.store.key, 
                            autoIncrement : this.objectStore.store.autoIncrement
                        })
                        for(let i in this.objectStore.fieldIndexed){
                            var index = this.objectStore.fieldIndexed[i]
                            var name = index.nameField || 'field' + i
                            obj.createIndex('by_' + name, name, { 
                                unique : index.unique || false
                            });
                        }
                    } catch (e) {
                        console.warn(e)
                    } finally {
                        this.objectStore = {}
                    }
                } 
            }
            request.onsuccess = (e) => {
                console.log('onsuccess...')
                this.db  = request.result
                this.version = this.db.version
                
               resolve(request.result)
                //this.db.close()
            }
            request.onerror = (e) => reject(e)
            request.oncomplete = () => echo('oncomplete...')
        })
    }
    /** 
     *  Add "tables" to bd 
     *  @params:
     *   store => {'tableX', key: 'id', autoIncrement: true}
     *   fieldIndexed => [{nameField: 'field', unique: false }]
     */
    addObjectStore(table, key = 'id', autoIncrement = true, fieldIndexed = []){
        if(this.db != null) this.db.close()
        this.version++
        this.objectStore.store = {
            name: table || 'table' + this.countTables, 
            key: key || 'id',
            autoIncrement: autoIncrement || true
        }
        this.objectStore.fieldIndexed = fieldIndexed

        //this.startDB()
    }
    // MÃ©todo ingreso de datos a la base datos 
    put(data){ 
        const self = this
        const promise = this.startDB();
        promise
            .then(function(e){
                const obj = self._openStorage(e, READWRITE)
                obj.put(data)
                    .oncomplete = (e)=> console.log('Put success')
                    .onerror = (e) =>  alert(request.error.name + '\n\n' + request.error.message)
            })
            .catch(e => console.warn(e))
    }
    del(key){
        this.startDB(()=>{
            const obj = this._openStorage(READWRITE)
                obj.delete(key)
                    .onerror = (e) =>  alert(request.error.name + '\n\n' + request.error.message)
                    .oncomplete = (e)=> console.log('delete success')
        })     
    }
    get(key){ 
        this.data = []
        this.startDB(()=>{
            const obj = this._openStorage(READONLY)
                obj.openCursor(key).onsuccess = (e) =>{
                    var result = e.target.result;
                    if (result === null) return
                    this.data.push(result.value)
                    //this.data.push(result.value)
                    result.continue()
                }
            })  
        return this.data
    }
    _openStorage(db, type){
        echo('_openStorage...')

        if(!this.db) return false
        return db
                .transaction(this.table, type)
                .objectStore(this.table)
    }
}