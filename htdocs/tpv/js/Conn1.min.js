class Conn{
    constructor(db){
        this.table = ''
        this.nameDB = db
        this.db = null
        this.objectStore = {}
        this.version = undefined
        this.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        return this.startDB()
    } 
    startDB(){
        let _this = this
        let request = this.indexedDB.open(this.nameDB, this.version)
        
        request.onupgradeneeded = function(e) {
            let db = request.result
            if (Object.keys(_this.objectStore).length !== 0 ){
                let storeName = _this.objectStore.store.name
            let obj = db.createObjectStore(storeName,{
                    keyPath: _this.objectStore.store.key, 
                    autoIncrement : _this.objectStore.store.autoIncrement
                })
                for(let i in _this.objectStore.indexes){
                    var index = _this.objectStore.indexes[i]
                    var name = index.nameField || 'field' + i
                    obj.createIndex('by_' + name, name, { 
                        unique : index.unique || false
                    });
                }
                _this.objectStore = {}
            } 

        }
        request.onsuccess = (e) => {
            this.db = request.result
            this.version = this.db.version 
        }
        request.onerror = (e) => console.log(e)
    }
    /** 
     *  Add "tables" to bd 
     *  @params:
     *   store => {name: 'objectStoreX', key: 'id', autoIncrement: true}
     *   Indexes => [{nameField: 'field', unique: false }]
    */
    addObjectStore(store = {}, indexes = []){
        this.version++
        this.objectStore.store = store
        this.objectStore.indexes = indexes
        if(typeof store.name === 'undefined') this.objectStore.store.name = 'objectStore' //+ this.db.transaction(this.nameDB, "readonly").objectStore(this.nameDB).count()
        if(typeof store.key === 'undefined') this.objectStore.store.key = 'id'
        if(typeof store.autoIncrement === 'undefined') this.objectStore.store.autoIncrement = true
        
        this.startDB()
    }
    put(table, data = {}){ 
        this.db
            .transaction(table, "readwrite")
            .objectStore(table || this.table)
            .put(data)
                .onerror = (e) =>  alert(request.error.name + '\n\n' + request.error.message)
                .oncomplete = (e)=> console.log('Put success')
    }
    delete(key){
        this.db
            .transaction(table, "readwrite")
            .objectStore(table || this.table)
            .delete(key)
                .onerror = (e) =>  alert(request.error.name + '\n\n' + request.error.message)
                .oncomplete = (e)=> console.log('Put success')
    }
}