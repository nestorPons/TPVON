<!-- <label for="control_<?=$id?>"></label> -->
<input type="checkbox" id="control_<?=$idElement?>" class="modal">
<div>
  <div class="card card-modal" id="<?=$idElement?>" onkeyup="<?=$idObj?>.keyup(event)">
    <label for="control_<?=$idElement?>" class="modal-close" ></label>
    <h1 id="tileModal<?=$idElement?>"></h1>
    <?php include($body)?>
  </div>
</div>
  <style>
    #<?=$idElement?>{
        overflow: inherit;
        padding: 1rem;
    }
    #<?=$idElement?>  .modal-close{
      top: -1em;
      background-color: inherit;
      right: -1em;
      border-radius: 25px;
      padding: 0;
      border: 1px solid var(--border-color);

    }
    #<?=$idElement?> label.modal-close:hover:before{
      color: var(--input-invalid-color) ;
    }
  </style>
  <script>
    'use strict'
    const <?=$idObj?> = {
      el : document.getElementById('<?=$idElement?>'),
      $el : $('#<?=$idElement?>'),
      switch : document.getElementById('control_<?=$idElement?>'),
      tile : document.getElementById('tileModal<?=$idElement?>'),
      keyup(e){
        (e.key === 'Escape') && this.hide()
      },
      clear(){
        this.$el.find('form').trigger('reset')
        return this
      },
      setTile(tile){
        this.tile.innerHTML = tile
        return this
      },
      open(data = null){
        if(data) this.load(data)
        this.switch.checked = true;
        let e = this.el.querySelector('[tabindex="1"]')
        if(e) e.focus()
        
        return this
      },
      close(){
        this.switch.checked = false;
        return this
      },
      load(data){
        const inputs = this.$el.find('input'),
              selects = this.$el.find('select'),
              d = exist(data.id) ? data : data[0]

        selects.each(function(){

          $(this).find('[selected]').attr('selected',false)
          if(d.id != -1)
            $(this)
              .find('option[value="'+d[$(this).attr('name')]+'"]').attr('selected', true)    
          else
            $(this)
              .find('[default]').attr('selected',true)
        })
        inputs.each(function(){
          if($(this).attr('type') == 'checkbox' || $(this).attr('type') == 'radio'){
            if(d[$(this).attr('name')] == $(this).val()) $(this).prop('checked', true)
            else $(this).prop('checked', false)  

          }
          else $(this).val(d[$(this).attr('name')])
        })
        return this
      },
      getData(){ 
        return app.formToObject(this.el)
      }
  }
  /*  var Modal = class{
      constructor(id){
        this.el = document.getElementById('<?=$idElement?>')
        this.$el = $('#<?=$idElement?>')
        this.$switch = $('#control_' + id)
        this.$el.keyup(e => (e.key === 'Escape') && this.hide())
      }
      clear(){
        this.$el.find('form').trigger('reset')
        return this
      }
      setTile(tile){
        $('#tileModal<?=$idElement?>').html(tile)
        return this
      }
      show(data = null){
        if(data) this.load(data)
        this.$switch.prop('checked',true)
        this.$el.find('[tabindex=1]').focus()
        return this
      }
      hide(){
        this.$switch.prop('checked',false)
        return this
      }
      load(data){
        const inputs = this.$el.find('input'),
              selects = this.$el.find('select'),
              d = exist(data.id) ? data : data[0]

        selects.each(function(){

          $(this).find('[selected]').attr('selected',false)
          if(d.id != -1)
            $(this)
              .find('option[value="'+d[$(this).attr('name')]+'"]').attr('selected', true)    
          else
            $(this)
              .find('[default]').attr('selected',true)
        })
        inputs.each(function(){
          if($(this).attr('type') == 'checkbox' || $(this).attr('type') == 'radio'){
            if(d[$(this).attr('name')] == $(this).val()) $(this).prop('checked', true)
            else $(this).prop('checked', false)  

          }
          else $(this).val(d[$(this).attr('name')])
        })
        return this
      }
      getData(){ 
        return app.formToObject(this.el)
      }
    } */
  </script>